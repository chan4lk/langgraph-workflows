[project]
name = "langgraph-workflow-engine"
version = "0.0.1"
description = "Starter template for making a custom Reasoning and Action agent (using tool calling) in LangGraph."
authors = [
    { name = "Chandima Ranaweera", email = "chan4lk@gmail.com" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
dependencies = [
    "langgraph>=0.2.6",
    "langchain-openai>=0.1.22",
    "langchain-anthropic>=0.1.23",
    "langchain>=0.2.14",
    "langchain-fireworks>=0.1.7",
    "python-dotenv>=1.0.1",
    "langchain-community>=0.2.17",
    "PyPDF2>=3.0.0",
    "tavily-python>=0.4.0",
    "langchain-mcp-adapters>=0.0.5",
    "langchain-ollama>=0.3.0",
    "pytest>=8.3.5",
    "fastapi>=0.115.12",
    "langgraph-checkpoint-sqlite>=2.0.7",
    "python-docx>=1.1.2",
    "markdown-it-py>=3.0.0",
    "langmem>=0.0.27",
    "pytest-asyncio>=1.0.0",
    "graphiti-core>=0.12.4",
]


[project.optional-dependencies]
dev = ["mypy>=1.11.1", "ruff>=0.6.1"]

[build-system]
requires = ["setuptools>=73.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = [
    "langgraph.templates.react_agent", 
    "react_agent", 
    "langgraph.templates.slack_approval", 
    "slack_approval", 
    "swot_analyzer", 
    "langgraph.templates.meta_prompter", 
    "meta_prompter",
    "mcp_agent",
    "cv_analyzer",
    "service_now_mcp",
    "service_now_sentiment",
    "credit_agents",
    "credit_agents_dynamic",
    "credit_agents_deterministic",
    "bookstore",
    "smart_goals",
    "meta_prompter_windsurf",
    "design_doc_generator",
    "self_learning",
    "self_learning_graphiti",
]

    
[tool.setuptools.package-dir]
"langgraph.templates.react_agent" = "src/react_agent"
"react_agent" = "src/react_agent"
"langgraph.templates.slack_approval" = "src/slack_approval"
"slack_approval" = "src/slack_approval"
"swot_analyzer" = "src/swot_analyzer"
"langgraph.templates.meta_prompter" = "src/meta_prompter"
"meta_prompter" = "src/meta_prompter"
"cv_analyzer" = "src/cv_analyzer"
"mcp_agent" = "src/mcp_agent"
"service_now_mcp" = "src/service_now_mcp"
"credit_agents" = "src/credit_agents"
"credit_agents_dynamic" = "src/credit_agents_dynamic"
"service_now_sentiment" = "src/service_now_sentiment"
"credit_agents_deterministic" = "src/credit_agents_deterministic"
"bookstore" = "src/bookstore"
"smart_goals" = "src/smart_goals"
"meta_prompter_windsurf" = "src/meta_prompter_windsurf"
"design_doc_generator" = "src/design_doc_generator"
"self_learning" = "src/self_learning"
"self_learning_graphiti" = "src/self_learning_graphiti"

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.ruff]
lint.select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "D",    # pydocstyle
    "D401", # First line should be in imperative mood
    "T201",
    "UP",
]
lint.ignore = [
    "UP006",
    "UP007",
    # We actually do want to import from typing_extensions
    "UP035",
    # Relax the convention by _not_ requiring documentation for every function parameter.
    "D417",
    "E501",
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "UP"]
[tool.ruff.lint.pydocstyle]
convention = "google"

[dependency-groups]
dev = [
    "langgraph-cli[inmem]>=0.1.71",
]
